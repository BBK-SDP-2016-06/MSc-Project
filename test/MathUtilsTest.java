import org.junit.Test;
import preprocessing.MathUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import static org.junit.Assert.*;

/**
 * Tests for the MathUtils class of the preprocessing package.
 * Created by George Shiangoli on 26/07/2016.
 */
public class MathUtilsTest {

    @Test
    public void testGetMeanOnSingleValue() {
        assertEquals(5.0, MathUtils.getMean(Collections.singletonList(5.0)), 0.0001);
    }

    @Test
    public void testGetMeanOnZero() {
        assertEquals(0.0, MathUtils.getMean(Collections.singletonList(0.0)), 0.0001);
    }

    @Test
    public void testGetMeanOnEmptyList() {
        double d = MathUtils.getMean(new ArrayList<>());
        assertTrue(Double.isNaN(d));
    }

    @Test
    public void testGetMeanOnMultipleValues() {
        assertEquals(2.5, MathUtils.getMean(Arrays.asList(1.0, 2.0, 3.0, 4.0)), 0.0001);
    }

    @Test
    public void testGetMeanOnTimeSeriesSample() {
        assertEquals(0.0, MathUtils.getMean(Arrays.asList(
                1.0052,0.9826,0.9228,0.91275,0.94833,0.9109,0.87829,0.84618,0.83354,0.80056,0.79394,
                0.76356,0.75965,0.73194,0.68065,0.68042,0.65586,0.60678,0.58474,0.5893,0.57021,0.54998,
                0.53347,0.515,0.50112,0.45966,0.44383,0.42876,0.38988,0.38229,0.37003,0.33429,0.29958,
                0.28999,0.25731,0.21753,0.21038,0.15699,0.11916,0.025691,-0.030454,-0.072538,-0.12306,
                -0.12481,-0.092961,-0.11536,-0.15363,-0.19785,-0.27731,-0.33237,-0.37478,-0.391,-0.43016,
                -0.44279,-0.52129,-0.59197,-0.63736,-0.70707,-0.69178,-0.63146,-0.58878,-0.5687,-0.52274,
                -0.49915,-0.46494,-0.43728,-0.43102,-0.38909,-0.38962,-0.37732,-0.37531,-0.39398,-0.35497,
                -0.33571,-0.34952,-0.37637,-0.38739,-0.3769,-0.36539,-0.33665,-0.3228,-0.30942,-0.32862,
                -0.31128,-0.31045,-0.37912,-0.43156,-0.50047,-0.57153,-0.6281,-0.66648,-0.72078,-0.79151,
                -0.84322,-0.87474,-0.8881,-0.84511,-0.80036,-0.7745,-0.79679,-0.80332,-0.82164,-0.83759,
                -0.77133,-0.74998,-0.78317,-0.75833,-0.78795,-0.79212,-0.78562,-0.78562,-0.78317,-0.77206,
                -0.73528,-0.72173,-0.71171,-0.69935,-0.70968,-0.63759,-0.59015,-0.51729,-0.4692,-0.39568,
                -0.347,-0.29919,-0.19855,-0.12306,-0.048424,0.0012611,0.07633,0.15187,0.22785,0.30398,0.35509,
                0.43152,0.48291,0.55959,0.63638,0.68815,0.74004,0.81716,0.8908,0.91298,0.90883,0.88247,0.80655,
                0.78114,0.78229,0.80898,0.86141,0.8908,0.89638,0.90587,0.91771,0.92811,0.96466,0.99793,1.0165,
                0.97211,0.87352,0.88984,0.91357,0.93952,0.9775,1.04,1.0622,1.1094,1.1421,1.1679,1.1714,1.1995,
                1.2056,1.2028,1.2447,1.2437,1.2547,1.301,1.3369,1.3862,1.3897,1.3119,1.2429,1.1957,1.1488,
                1.0801,1.0214,0.98551,0.92826,0.88299,0.8042,0.73657,0.68026,0.61275,0.55644,0.47756,0.39871,
                0.3313,0.26359,0.20728,0.13971,0.083398,-0.0065454,-0.095862,-0.12823,-0.18181,-0.21266,-0.26423,
                -0.25863,-0.23793,-0.25049,-0.27649,-0.28633,-0.27495,-0.29806,-0.30384,-0.30797,-0.29219,-0.25781,
                -0.2574,-0.27383,-0.27056,-0.28479,-0.27864,-0.29065,-0.28161,-0.29137,-0.27946,-0.26596,-0.23743,
                -0.2213,-0.19097,-0.17229,-0.15215,-0.13058,-0.11926,-0.095573,-0.070521,-0.034342,-0.0071095,
                0.021397,0.05975,0.066483,0.098042,0.13076,0.16462,0.17526,0.18677,0.22362,0.23691,0.27568,0.28609,
                0.27334,0.28705,0.30243,0.32196,0.3401,0.30958,0.30571,0.30338,0.30269,0.27881,0.28167,0.26097,
                0.26699,0.27742,0.2587,0.27334,0.26132,0.29544,0.31612,0.33335,0.35858,0.37917,0.37714,0.40065,
                0.36961,0.40467,0.39972,0.43851,0.43576,0.47814,0.52266,0.55741,0.57126,0.58666,0.59058,0.5953,
                0.61442,0.60009,0.60766,0.59554,0.6401,0.71585,0.77702,0.84175,0.8668,0.87762,0.86956,0.88202,
                0.87606,0.83573,0.88626,0.90194,0.93577,0.97079,1.0245,1.026,1.0642,1.0846,1.1057,1.1111,1.0821,
                1.1409,1.2199,1.2293,1.2547,1.301,1.2925,1.2357,1.1868,1.117,1.0611,1.0412,1.0572,1.0527,1.0363,
                0.99931,0.92103,0.85519,0.7963,0.74859,0.71406,0.64649,0.59018,0.51133,0.44391,0.3545,0.27595,
                0.23022,0.17392,0.0953,0.0064235,-0.025525,-0.078595,-0.095958,-0.16014,-0.17517,-0.18868,-0.18023,
                -0.17081,-0.18033,-0.25527,-0.31035,-0.38113,-0.4321,-0.50279,-0.55798,-0.62868,-0.67939,-0.74998,
                -0.82052,-0.87589,-0.9312,-1.0063,-1.0812,-1.1477,-1.2029,-1.2778,-1.3363,-1.4101,-1.4666,-1.5392,
                -1.5934,-1.6646,-1.7171,-1.7867,-1.8553,-1.9069,-1.9737,-2.0242,-2.0887,-2.165,-2.2145,-2.2845,-2.3403,
                -2.4168,-2.4869,-2.5358,-2.6127,-2.6685,-2.7485,-2.8031,-2.8754,-2.9285,-2.9963,-3.0585,-3.0869,
                -3.0959,-3.0793,-2.9997,-2.9278,-2.8304,-2.7613,-2.6867,-2.6119,-2.5396,-2.4392,-2.3639,-2.2865,-2.1862,
                -2.1109,-2.0104,-1.9351,-1.8806,-1.8278,-1.7498,-1.6716,-1.5967,-1.5435,-1.4651,-1.3867,-1.3288,-1.2748,
                -1.2004,-1.1216,-1.0675,-1.0031,-0.92926,-0.87474,-0.81457,-0.75384,-0.69888,-0.64385,-0.5823,-0.50279,
                -0.46494,-0.4024,-0.33947,-0.30012,-0.23642,-0.19615,-0.13175,-0.090644,-0.025619,0.0023868,0.054942,0.12125,
                0.15241,0.19602,0.23022,0.27777,0.31483,0.36605,0.4271,0.47526,0.53736,0.57921,0.60144,0.64547,0.7056,0.76731,
                0.77916,0.80792,0.85699,0.88805,0.93886,0.97211,1.0066,1.0242,1.0607,1.0799,1.1183,1.0679,0.99909,0.92361,
                0.86769,0.7941,0.72212,0.67,0.68979,0.72908,0.75043,0.75627,0.79873,0.85781,0.90209,0.96239,0.9732,1.0202,
                1.0123,1.0052,1.0547,1.0704,1.0657,1.0489,1.0678,1.0656,1.0524,1.0857,1.0748,1.0652,1.0673,1.0601,1.0311,
                1.0266,1.0323,0.99822,1.0058,0.97503,0.98456,0.98805,0.9686)), 0.0001);
    }

    @Test
    public void testGetStandardDeviationOnSingleVale() {
        assertEquals(0.0, MathUtils.getStandardDeviation(Collections.singletonList(5.0)), 0.0001);
    }

    @Test
    public void testGetStandardDeviationOnZero() {
        assertEquals(0.0, MathUtils.getStandardDeviation(Collections.singletonList(0.0)), 0.0001);
    }

    @Test
    public void testGetStandardDeviationOnEmptyList() {
        double d = MathUtils.getStandardDeviation(new ArrayList<>());
        assertTrue(Double.isNaN(d));
    }

    @Test
    public void testGetStandardDeviationOnMultipleValues() {
        assertEquals(1.118, MathUtils.getStandardDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0)), 0.0001);
    }

    @Test
    public void testGetStandardDeviationOnTimeSeriesSample() {
        assertEquals(1.0, MathUtils.getStandardDeviation(Arrays.asList(
                1.0052,0.9826,0.9228,0.91275,0.94833,0.9109,0.87829,0.84618,0.83354,0.80056,0.79394,
                0.76356,0.75965,0.73194,0.68065,0.68042,0.65586,0.60678,0.58474,0.5893,0.57021,0.54998,
                0.53347,0.515,0.50112,0.45966,0.44383,0.42876,0.38988,0.38229,0.37003,0.33429,0.29958,
                0.28999,0.25731,0.21753,0.21038,0.15699,0.11916,0.025691,-0.030454,-0.072538,-0.12306,
                -0.12481,-0.092961,-0.11536,-0.15363,-0.19785,-0.27731,-0.33237,-0.37478,-0.391,-0.43016,
                -0.44279,-0.52129,-0.59197,-0.63736,-0.70707,-0.69178,-0.63146,-0.58878,-0.5687,-0.52274,
                -0.49915,-0.46494,-0.43728,-0.43102,-0.38909,-0.38962,-0.37732,-0.37531,-0.39398,-0.35497,
                -0.33571,-0.34952,-0.37637,-0.38739,-0.3769,-0.36539,-0.33665,-0.3228,-0.30942,-0.32862,
                -0.31128,-0.31045,-0.37912,-0.43156,-0.50047,-0.57153,-0.6281,-0.66648,-0.72078,-0.79151,
                -0.84322,-0.87474,-0.8881,-0.84511,-0.80036,-0.7745,-0.79679,-0.80332,-0.82164,-0.83759,
                -0.77133,-0.74998,-0.78317,-0.75833,-0.78795,-0.79212,-0.78562,-0.78562,-0.78317,-0.77206,
                -0.73528,-0.72173,-0.71171,-0.69935,-0.70968,-0.63759,-0.59015,-0.51729,-0.4692,-0.39568,
                -0.347,-0.29919,-0.19855,-0.12306,-0.048424,0.0012611,0.07633,0.15187,0.22785,0.30398,0.35509,
                0.43152,0.48291,0.55959,0.63638,0.68815,0.74004,0.81716,0.8908,0.91298,0.90883,0.88247,0.80655,
                0.78114,0.78229,0.80898,0.86141,0.8908,0.89638,0.90587,0.91771,0.92811,0.96466,0.99793,1.0165,
                0.97211,0.87352,0.88984,0.91357,0.93952,0.9775,1.04,1.0622,1.1094,1.1421,1.1679,1.1714,1.1995,
                1.2056,1.2028,1.2447,1.2437,1.2547,1.301,1.3369,1.3862,1.3897,1.3119,1.2429,1.1957,1.1488,
                1.0801,1.0214,0.98551,0.92826,0.88299,0.8042,0.73657,0.68026,0.61275,0.55644,0.47756,0.39871,
                0.3313,0.26359,0.20728,0.13971,0.083398,-0.0065454,-0.095862,-0.12823,-0.18181,-0.21266,-0.26423,
                -0.25863,-0.23793,-0.25049,-0.27649,-0.28633,-0.27495,-0.29806,-0.30384,-0.30797,-0.29219,-0.25781,
                -0.2574,-0.27383,-0.27056,-0.28479,-0.27864,-0.29065,-0.28161,-0.29137,-0.27946,-0.26596,-0.23743,
                -0.2213,-0.19097,-0.17229,-0.15215,-0.13058,-0.11926,-0.095573,-0.070521,-0.034342,-0.0071095,
                0.021397,0.05975,0.066483,0.098042,0.13076,0.16462,0.17526,0.18677,0.22362,0.23691,0.27568,0.28609,
                0.27334,0.28705,0.30243,0.32196,0.3401,0.30958,0.30571,0.30338,0.30269,0.27881,0.28167,0.26097,
                0.26699,0.27742,0.2587,0.27334,0.26132,0.29544,0.31612,0.33335,0.35858,0.37917,0.37714,0.40065,
                0.36961,0.40467,0.39972,0.43851,0.43576,0.47814,0.52266,0.55741,0.57126,0.58666,0.59058,0.5953,
                0.61442,0.60009,0.60766,0.59554,0.6401,0.71585,0.77702,0.84175,0.8668,0.87762,0.86956,0.88202,
                0.87606,0.83573,0.88626,0.90194,0.93577,0.97079,1.0245,1.026,1.0642,1.0846,1.1057,1.1111,1.0821,
                1.1409,1.2199,1.2293,1.2547,1.301,1.2925,1.2357,1.1868,1.117,1.0611,1.0412,1.0572,1.0527,1.0363,
                0.99931,0.92103,0.85519,0.7963,0.74859,0.71406,0.64649,0.59018,0.51133,0.44391,0.3545,0.27595,
                0.23022,0.17392,0.0953,0.0064235,-0.025525,-0.078595,-0.095958,-0.16014,-0.17517,-0.18868,-0.18023,
                -0.17081,-0.18033,-0.25527,-0.31035,-0.38113,-0.4321,-0.50279,-0.55798,-0.62868,-0.67939,-0.74998,
                -0.82052,-0.87589,-0.9312,-1.0063,-1.0812,-1.1477,-1.2029,-1.2778,-1.3363,-1.4101,-1.4666,-1.5392,
                -1.5934,-1.6646,-1.7171,-1.7867,-1.8553,-1.9069,-1.9737,-2.0242,-2.0887,-2.165,-2.2145,-2.2845,-2.3403,
                -2.4168,-2.4869,-2.5358,-2.6127,-2.6685,-2.7485,-2.8031,-2.8754,-2.9285,-2.9963,-3.0585,-3.0869,
                -3.0959,-3.0793,-2.9997,-2.9278,-2.8304,-2.7613,-2.6867,-2.6119,-2.5396,-2.4392,-2.3639,-2.2865,-2.1862,
                -2.1109,-2.0104,-1.9351,-1.8806,-1.8278,-1.7498,-1.6716,-1.5967,-1.5435,-1.4651,-1.3867,-1.3288,-1.2748,
                -1.2004,-1.1216,-1.0675,-1.0031,-0.92926,-0.87474,-0.81457,-0.75384,-0.69888,-0.64385,-0.5823,-0.50279,
                -0.46494,-0.4024,-0.33947,-0.30012,-0.23642,-0.19615,-0.13175,-0.090644,-0.025619,0.0023868,0.054942,0.12125,
                0.15241,0.19602,0.23022,0.27777,0.31483,0.36605,0.4271,0.47526,0.53736,0.57921,0.60144,0.64547,0.7056,0.76731,
                0.77916,0.80792,0.85699,0.88805,0.93886,0.97211,1.0066,1.0242,1.0607,1.0799,1.1183,1.0679,0.99909,0.92361,
                0.86769,0.7941,0.72212,0.67,0.68979,0.72908,0.75043,0.75627,0.79873,0.85781,0.90209,0.96239,0.9732,1.0202,
                1.0123,1.0052,1.0547,1.0704,1.0657,1.0489,1.0678,1.0656,1.0524,1.0857,1.0748,1.0652,1.0673,1.0601,1.0311,
                1.0266,1.0323,0.99822,1.0058,0.97503,0.98456,0.98805,0.9686)), 0.001);
    }

    @Test
    public void testisZNormalizedOnSingleVale() {
        assertFalse(MathUtils.isZNormalized(Collections.singletonList(5.0)));
    }

    @Test
    public void testisZNormalizedOnZero() {
        assertFalse(MathUtils.isZNormalized(Collections.singletonList(0.0)));
    }

    @Test
    public void testisZNormalizedOnEmptyList() {
        assertFalse(MathUtils.isZNormalized(new ArrayList<>()));
    }

    @Test
    public void testisZNormalizedOnMultipleValues() {
        assertFalse(MathUtils.isZNormalized(Arrays.asList(1.0, 2.0, 3.0, 4.0)));
    }

    @Test
    public void testisZNormalizedOnTimeSeriesSample() {
        assertTrue(MathUtils.isZNormalized(Arrays.asList(
                1.0052,0.9826,0.9228,0.91275,0.94833,0.9109,0.87829,0.84618,0.83354,0.80056,0.79394,
                0.76356,0.75965,0.73194,0.68065,0.68042,0.65586,0.60678,0.58474,0.5893,0.57021,0.54998,
                0.53347,0.515,0.50112,0.45966,0.44383,0.42876,0.38988,0.38229,0.37003,0.33429,0.29958,
                0.28999,0.25731,0.21753,0.21038,0.15699,0.11916,0.025691,-0.030454,-0.072538,-0.12306,
                -0.12481,-0.092961,-0.11536,-0.15363,-0.19785,-0.27731,-0.33237,-0.37478,-0.391,-0.43016,
                -0.44279,-0.52129,-0.59197,-0.63736,-0.70707,-0.69178,-0.63146,-0.58878,-0.5687,-0.52274,
                -0.49915,-0.46494,-0.43728,-0.43102,-0.38909,-0.38962,-0.37732,-0.37531,-0.39398,-0.35497,
                -0.33571,-0.34952,-0.37637,-0.38739,-0.3769,-0.36539,-0.33665,-0.3228,-0.30942,-0.32862,
                -0.31128,-0.31045,-0.37912,-0.43156,-0.50047,-0.57153,-0.6281,-0.66648,-0.72078,-0.79151,
                -0.84322,-0.87474,-0.8881,-0.84511,-0.80036,-0.7745,-0.79679,-0.80332,-0.82164,-0.83759,
                -0.77133,-0.74998,-0.78317,-0.75833,-0.78795,-0.79212,-0.78562,-0.78562,-0.78317,-0.77206,
                -0.73528,-0.72173,-0.71171,-0.69935,-0.70968,-0.63759,-0.59015,-0.51729,-0.4692,-0.39568,
                -0.347,-0.29919,-0.19855,-0.12306,-0.048424,0.0012611,0.07633,0.15187,0.22785,0.30398,0.35509,
                0.43152,0.48291,0.55959,0.63638,0.68815,0.74004,0.81716,0.8908,0.91298,0.90883,0.88247,0.80655,
                0.78114,0.78229,0.80898,0.86141,0.8908,0.89638,0.90587,0.91771,0.92811,0.96466,0.99793,1.0165,
                0.97211,0.87352,0.88984,0.91357,0.93952,0.9775,1.04,1.0622,1.1094,1.1421,1.1679,1.1714,1.1995,
                1.2056,1.2028,1.2447,1.2437,1.2547,1.301,1.3369,1.3862,1.3897,1.3119,1.2429,1.1957,1.1488,
                1.0801,1.0214,0.98551,0.92826,0.88299,0.8042,0.73657,0.68026,0.61275,0.55644,0.47756,0.39871,
                0.3313,0.26359,0.20728,0.13971,0.083398,-0.0065454,-0.095862,-0.12823,-0.18181,-0.21266,-0.26423,
                -0.25863,-0.23793,-0.25049,-0.27649,-0.28633,-0.27495,-0.29806,-0.30384,-0.30797,-0.29219,-0.25781,
                -0.2574,-0.27383,-0.27056,-0.28479,-0.27864,-0.29065,-0.28161,-0.29137,-0.27946,-0.26596,-0.23743,
                -0.2213,-0.19097,-0.17229,-0.15215,-0.13058,-0.11926,-0.095573,-0.070521,-0.034342,-0.0071095,
                0.021397,0.05975,0.066483,0.098042,0.13076,0.16462,0.17526,0.18677,0.22362,0.23691,0.27568,0.28609,
                0.27334,0.28705,0.30243,0.32196,0.3401,0.30958,0.30571,0.30338,0.30269,0.27881,0.28167,0.26097,
                0.26699,0.27742,0.2587,0.27334,0.26132,0.29544,0.31612,0.33335,0.35858,0.37917,0.37714,0.40065,
                0.36961,0.40467,0.39972,0.43851,0.43576,0.47814,0.52266,0.55741,0.57126,0.58666,0.59058,0.5953,
                0.61442,0.60009,0.60766,0.59554,0.6401,0.71585,0.77702,0.84175,0.8668,0.87762,0.86956,0.88202,
                0.87606,0.83573,0.88626,0.90194,0.93577,0.97079,1.0245,1.026,1.0642,1.0846,1.1057,1.1111,1.0821,
                1.1409,1.2199,1.2293,1.2547,1.301,1.2925,1.2357,1.1868,1.117,1.0611,1.0412,1.0572,1.0527,1.0363,
                0.99931,0.92103,0.85519,0.7963,0.74859,0.71406,0.64649,0.59018,0.51133,0.44391,0.3545,0.27595,
                0.23022,0.17392,0.0953,0.0064235,-0.025525,-0.078595,-0.095958,-0.16014,-0.17517,-0.18868,-0.18023,
                -0.17081,-0.18033,-0.25527,-0.31035,-0.38113,-0.4321,-0.50279,-0.55798,-0.62868,-0.67939,-0.74998,
                -0.82052,-0.87589,-0.9312,-1.0063,-1.0812,-1.1477,-1.2029,-1.2778,-1.3363,-1.4101,-1.4666,-1.5392,
                -1.5934,-1.6646,-1.7171,-1.7867,-1.8553,-1.9069,-1.9737,-2.0242,-2.0887,-2.165,-2.2145,-2.2845,-2.3403,
                -2.4168,-2.4869,-2.5358,-2.6127,-2.6685,-2.7485,-2.8031,-2.8754,-2.9285,-2.9963,-3.0585,-3.0869,
                -3.0959,-3.0793,-2.9997,-2.9278,-2.8304,-2.7613,-2.6867,-2.6119,-2.5396,-2.4392,-2.3639,-2.2865,-2.1862,
                -2.1109,-2.0104,-1.9351,-1.8806,-1.8278,-1.7498,-1.6716,-1.5967,-1.5435,-1.4651,-1.3867,-1.3288,-1.2748,
                -1.2004,-1.1216,-1.0675,-1.0031,-0.92926,-0.87474,-0.81457,-0.75384,-0.69888,-0.64385,-0.5823,-0.50279,
                -0.46494,-0.4024,-0.33947,-0.30012,-0.23642,-0.19615,-0.13175,-0.090644,-0.025619,0.0023868,0.054942,0.12125,
                0.15241,0.19602,0.23022,0.27777,0.31483,0.36605,0.4271,0.47526,0.53736,0.57921,0.60144,0.64547,0.7056,0.76731,
                0.77916,0.80792,0.85699,0.88805,0.93886,0.97211,1.0066,1.0242,1.0607,1.0799,1.1183,1.0679,0.99909,0.92361,
                0.86769,0.7941,0.72212,0.67,0.68979,0.72908,0.75043,0.75627,0.79873,0.85781,0.90209,0.96239,0.9732,1.0202,
                1.0123,1.0052,1.0547,1.0704,1.0657,1.0489,1.0678,1.0656,1.0524,1.0857,1.0748,1.0652,1.0673,1.0601,1.0311,
                1.0266,1.0323,0.99822,1.0058,0.97503,0.98456,0.98805,0.9686)));
    }

    @Test
    public void test5SFOnZero() {
        assertEquals(0, MathUtils.to5SF(0), 0);
    }

    @Test
    public void test5SFOnSingleDigit() {
        assertEquals(1, MathUtils.to5SF(1), 0);
    }

    @Test
    public void test5SFOn5DecimalPlaces() {
        assertEquals(0.12345, MathUtils.to5SF(0.12345), 0);
    }

    @Test
    public void test5SFOn5DigitNumber() {
        assertEquals(12345, MathUtils.to5SF(12345), 0);
    }

    @Test
    public void test5SFOnLargeDecimal() {
        assertEquals(0.12346, MathUtils.to5SF(0.123456), 0);
    }

    @Test
    public void test5SFOnLargeNumber() {
        assertEquals(1253100, MathUtils.to5SF(1253112), 0);
    }

    @Test
    public void test5SFOnSmallDecimal() {
        assertEquals(0.12, MathUtils.to5SF(0.12), 0);
    }

    @Test
    public void test5SFOnDecimalWithZeros() {
        assertEquals(0.0053461, MathUtils.to5SF(0.0053460789333333), 0);
    }

    @Test
    public void test5SFOnDecimalNumber() {
        assertEquals(10.005, MathUtils.to5SF(10.0053460789333333), 0);
    }

    @Test
    public void test5SFOnNegativeDecimalNumber() {
        assertEquals(-10.005, MathUtils.to5SF(-10.0053460789333333), 0);
    }

}
